const express = require('express');
const userController = require('../controllers/userController');
const authValidator = require('../validators/authValidator');
const { authMiddleware, optionalAuthMiddleware } = require('../middleware/authMiddleware');

const router = express.Router();

// ================================================
// ROUTES UTILISATEURS PUBLIQUES
// ================================================

// üëÅÔ∏è PROFIL PUBLIC D'UN UTILISATEUR - GET /api/users/profile/:username
router.get('/profile/:username',
  // Pas d'authentification requise pour voir un profil public
  userController.getPublicProfile
);

// ‚úÖ V√âRIFIER LA DISPONIBILIT√â D'UN USERNAME - GET /api/users/check/username/:username
router.get('/check/username/:username',
  optionalAuthMiddleware, // Optionnel car utile pendant l'inscription
  userController.checkUsernameAvailability
);

// ‚úÖ V√âRIFIER LA DISPONIBILIT√â D'UN EMAIL - GET /api/users/check/email/:email
router.get('/check/email/:email',
  optionalAuthMiddleware, // Optionnel car utile pendant l'inscription
  userController.checkEmailAvailability
);

// üìä STATISTIQUES PUBLIQUES - GET /api/users/statistics
router.get('/statistics',
  optionalAuthMiddleware, // Optionnel - plus d'infos si connect√©
  userController.getUserStatistics
);

// üåê UTILISATEURS EN LIGNE - GET /api/users/online
router.get('/online',
  authMiddleware, // Authentification requise
  userController.getOnlineUsers
);

// ================================================
// ROUTES UTILISATEURS PROT√âG√âES
// ================================================

// üîç RECHERCHER DES UTILISATEURS - GET /api/users/search
router.get('/search',
  authMiddleware,
  authValidator.getSearchUsersValidation(),
  userController.searchUsers
);

// ‚úèÔ∏è METTRE √Ä JOUR SON PROFIL - PUT /api/users/profile
router.put('/profile',
  authMiddleware,
  authValidator.getProfileUpdateValidation(),
  userController.updateUserProfile
);

// üîÑ METTRE √Ä JOUR SON STATUT - PUT /api/users/status
router.put('/status',
  authMiddleware,
  authValidator.getUpdateStatusValidation(),
  userController.updateUserStatus
);

// üëÅÔ∏è METTRE √Ä JOUR LA DERNI√àRE ACTIVIT√â - PUT /api/users/activity
router.put('/activity',
  authMiddleware,
  userController.updateLastSeen
);

// üë§ PROFIL UTILISATEUR SP√âCIFIQUE - GET /api/users/:userId
// IMPORTANT: Cette route doit √™tre EN DERNIER car elle capture tout ce qui ne correspond pas aux routes sp√©cifiques ci-dessus
router.get('/:userId',
  authMiddleware,
  userController.getUserById
);

// ================================================
// GESTION DES ERREURS
// ================================================

// üö´ GESTION DES M√âTHODES NON AUTORIS√âES
router.all('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: `Route ${req.method} ${req.originalUrl} non trouv√©e`,
    code: 'USER_ROUTE_NOT_FOUND',
    availableRoutes: [
      'GET /api/users/profile/:username - Profil public',
      'GET /api/users/check/username/:username - V√©rifier username',
      'GET /api/users/check/email/:email - V√©rifier email',
      'GET /api/users/statistics - Statistiques',
      'GET /api/users/online - Utilisateurs en ligne',
      'GET /api/users/search - Rechercher',
      'GET /api/users/:userId - Profil utilisateur',
      'PUT /api/users/profile - Mettre √† jour profil',
      'PUT /api/users/status - Mettre √† jour statut',
      'PUT /api/users/activity - Mettre √† jour activit√©'
    ]
  });
});

module.exports = router;