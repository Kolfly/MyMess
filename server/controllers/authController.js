const { validationResult } = require('express-validator');
const authService = require('../services/authService');
const { generateTokenPair } = require('../utils/jwt');

// üé≠ CONTROLLER D'AUTHENTIFICATION
// Le controller est l'interface entre les requ√™tes HTTP et notre logique m√©tier
// Il orchestre les appels aux services et formate les r√©ponses
class AuthController {

  // üìù INSCRIPTION D'UN NOUVEL UTILISATEUR
  // Route: POST /api/auth/register
  async register(req, res) {
    try {
      // √âtape 1: V√©rifier les donn√©es d'entr√©e avec express-validator
      // Ces validations ont √©t√© d√©finies dans nos routes (on verra √ßa plus tard)
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        // Si des erreurs de validation existent, on les retourne clairement
        return res.status(400).json({
          success: false,
          message: 'Erreurs de validation des donn√©es',
          errors: errors.array().map(err => ({
            field: err.path,        // Quel champ pose probl√®me
            message: err.msg,       // Message d'erreur lisible
            value: err.value        // Valeur probl√©matique (utile pour debug)
          }))
        });
      }

      // √âtape 2: D√©l√©guer la cr√©ation √† notre service
      // Le controller ne conna√Æt pas les d√©tails de comment cr√©er un utilisateur,
      // il fait juste confiance au service pour faire le travail correctement
      const result = await authService.createUser(req.body);

      // √âtape 3: Formater une r√©ponse de succ√®s standardis√©e
      // Une structure coh√©rente aide les clients (Angular, mobile, etc.) √† traiter les r√©ponses
      res.status(201).json({
        success: true,
        message: result.message,
        data: {
          user: result.user,
          token: result.token,
          // Infos utiles pour le client
          tokenType: 'Bearer',
          expiresIn: process.env.JWT_EXPIRE || '7d'
        },
        // Timestamp pour que le client sache quand cette r√©ponse a √©t√© g√©n√©r√©e
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur registration:', error);
      
      // √âtape 4: Gestion centralis√©e des erreurs
      // On traduit les erreurs techniques en messages compr√©hensibles pour l'utilisateur
      
      if (error.message.includes('existe d√©j√†')) {
        return res.status(409).json({  // 409 = Conflict
          success: false,
          message: error.message,
          code: 'USER_ALREADY_EXISTS'
        });
      }

      if (error.message.includes('validation')) {
        return res.status(400).json({  // 400 = Bad Request
          success: false,
          message: error.message,
          code: 'VALIDATION_ERROR'
        });
      }

      // Erreur g√©n√©rique pour tout ce qu'on n'a pas pr√©vu
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la cr√©ation du compte',
        code: 'REGISTRATION_ERROR',
        // En d√©veloppement, on peut donner plus de d√©tails
        ...(process.env.NODE_ENV === 'development' && { 
          details: error.message 
        })
      });
    }
  }

  // üîê CONNEXION D'UN UTILISATEUR
  // Route: POST /api/auth/login
  async login(req, res) {
    try {
      // Validation des donn√©es d'entr√©e
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Donn√©es de connexion invalides',
          errors: errors.array().map(err => ({
            field: err.path,
            message: err.msg
          }))
        });
      }

      const { email, password } = req.body;

      // D√©l√©guer l'authentification au service
      const result = await authService.authenticateUser(email, password);

      // G√©n√©rer une paire compl√®te de tokens (access + refresh)
      const tokenPair = generateTokenPair(result.user.id);

      // Enregistrer des infos de connexion utiles (pour les stats, la s√©curit√©, etc.)
      const loginInfo = {
        loginTime: new Date().toISOString(),
        userAgent: req.get('User-Agent'),  // Navigateur/app utilis√©
        ip: req.ip || req.connection.remoteAddress,  // Adresse IP
        // On ne stocke pas ces infos dans la DB pour l'instant, mais on pourrait
      };

      res.status(200).json({
        success: true,
        message: 'Connexion r√©ussie',
        data: {
          user: result.user,
          tokens: {
            accessToken: tokenPair.accessToken,
            refreshToken: tokenPair.refreshToken,
            tokenType: tokenPair.tokenType,
            expiresIn: tokenPair.expiresIn,
            refreshExpiresIn: tokenPair.refreshExpiresIn
          }
        },
        meta: {
          loginInfo,
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('Erreur login:', error);
      
      // Gestion sp√©cialis√©e des erreurs de connexion
      if (error.message.includes('incorrect') || error.message.includes('invalide')) {
        // On ne donne pas trop de d√©tails pour √©viter l'√©num√©ration des comptes
        return res.status(401).json({  // 401 = Unauthorized
          success: false,
          message: 'Identifiants invalides',
          code: 'INVALID_CREDENTIALS'
        });
      }

      if (error.message.includes('bloqu√©')) {
        return res.status(423).json({  // 423 = Locked
          success: false,
          message: error.message,
          code: 'ACCOUNT_LOCKED'
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erreur lors de la connexion',
        code: 'LOGIN_ERROR',
        ...(process.env.NODE_ENV === 'development' && { 
          details: error.message 
        })
      });
    }
  }

  // üëã D√âCONNEXION
  // Route: POST /api/auth/logout
  async logout(req, res) {
    try {
      // req.user est disponible gr√¢ce √† notre middleware d'authentification
      await authService.logoutUser(req.user.id);

      // En production, on pourrait aussi ajouter le token √† une "blacklist"
      // pour s'assurer qu'il ne peut plus √™tre utilis√© m√™me avant expiration

      res.status(200).json({
        success: true,
        message: 'D√©connexion r√©ussie',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur logout:', error);
      
      // M√™me si la d√©connexion √©choue c√¥t√© serveur, 
      // on peut consid√©rer que c'est r√©ussi c√¥t√© client
      res.status(200).json({
        success: true,
        message: 'D√©connexion effectu√©e',
        note: 'Une erreur mineure s\'est produite c√¥t√© serveur, mais vous √™tes bien d√©connect√©'
      });
    }
  }

  // üë§ R√âCUP√âRER LE PROFIL DE L'UTILISATEUR CONNECT√â
  // Route: GET /api/auth/me
  async getMe(req, res) {
    try {
      // Le middleware d'authentification nous garantit que req.user existe
      const result = await authService.getUserById(req.user.id);

      res.status(200).json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur getMe:', error);
      
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la r√©cup√©ration du profil',
        code: 'PROFILE_FETCH_ERROR'
      });
    }
  }

  // ‚úèÔ∏è MISE √Ä JOUR DU PROFIL
  // Route: PUT /api/auth/profile
  async updateProfile(req, res) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Erreurs de validation',
          errors: errors.array().map(err => ({
            field: err.path,
            message: err.msg,
            value: err.value
          }))
        });
      }

      // D√©l√©guer la mise √† jour au service
      const result = await authService.updateUserProfile(req.user.id, req.body);

      res.status(200).json({
        success: true,
        message: result.message,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur updateProfile:', error);
      
      if (error.message.includes('d√©j√† pris')) {
        return res.status(409).json({
          success: false,
          message: error.message,
          code: 'USERNAME_TAKEN'
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erreur lors de la mise √† jour du profil',
        code: 'PROFILE_UPDATE_ERROR'
      });
    }
  }

  // üîÑ RENOUVELLEMENT DU TOKEN
  // Route: POST /api/auth/refresh
  async refreshToken(req, res) {
    try {
      const { refreshToken } = req.body;

      if (!refreshToken) {
        return res.status(400).json({
          success: false,
          message: 'Token de rafra√Æchissement requis',
          code: 'REFRESH_TOKEN_REQUIRED'
        });
      }

      // Utiliser notre utilitaire JWT pour renouveler le token
      const { refreshAccessToken } = require('../utils/jwt');
      const newTokenData = refreshAccessToken(refreshToken);

      res.status(200).json({
        success: true,
        message: 'Token renouvel√© avec succ√®s',
        data: {
          tokens: newTokenData
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur refreshToken:', error);
      
      if (error.message.includes('Token') || error.message.includes('token')) {
        return res.status(401).json({
          success: false,
          message: 'Token de rafra√Æchissement invalide ou expir√©',
          code: 'INVALID_REFRESH_TOKEN'
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erreur lors du renouvellement du token',
        code: 'TOKEN_REFRESH_ERROR'
      });
    }
  }

  // üîê CHANGEMENT DE MOT DE PASSE
  // Route: PUT /api/auth/change-password
  async changePassword(req, res) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Erreurs de validation',
          errors: errors.array().map(err => ({
            field: err.path,
            message: err.msg
          }))
        });
      }

      const { currentPassword, newPassword } = req.body;

      // V√©rifier d'abord le mot de passe actuel
      try {
        await authService.authenticateUser(req.user.email, currentPassword);
      } catch (authError) {
        return res.status(401).json({
          success: false,
          message: 'Mot de passe actuel incorrect',
          code: 'INVALID_CURRENT_PASSWORD'
        });
      }

      // Mettre √† jour avec le nouveau mot de passe
      const bcrypt = require('bcryptjs');
      const hashedNewPassword = await bcrypt.hash(newPassword, 12);
      
      await req.user.update({ password: hashedNewPassword });

      res.status(200).json({
        success: true,
        message: 'Mot de passe modifi√© avec succ√®s',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur changePassword:', error);
      
      res.status(500).json({
        success: false,
        message: 'Erreur lors du changement de mot de passe',
        code: 'PASSWORD_CHANGE_ERROR'
      });
    }
  }

  // üìä STATISTIQUES DU COMPTE (bonus)
  // Route: GET /api/auth/stats
  async getAccountStats(req, res) {
    try {
      // R√©cup√©rer quelques statistiques utiles sur le compte
      const stats = {
        accountAge: Math.floor((Date.now() - new Date(req.user.createdAt)) / (1000 * 60 * 60 * 24)), // √Çge en jours
        lastLogin: req.user.lastLogin,
        currentStatus: req.user.status,
        profileCompletion: this.calculateProfileCompletion(req.user),
        securityScore: this.calculateSecurityScore(req.user)
      };

      res.status(200).json({
        success: true,
        data: { stats },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Erreur getAccountStats:', error);
      
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la r√©cup√©ration des statistiques',
        code: 'STATS_ERROR'
      });
    }
  }

  // üßÆ M√âTHODES UTILITAIRES PRIV√âES

  // Calculer le pourcentage de compl√©tion du profil
  calculateProfileCompletion(user) {
    const fields = ['firstName', 'lastName', 'avatar'];
    const completedFields = fields.filter(field => user[field] && user[field].trim() !== '');
    return Math.round((completedFields.length / fields.length) * 100);
  }

  // Calculer un score de s√©curit√© basique
  calculateSecurityScore(user) {
    let score = 50; // Score de base
    
    if (user.firstName && user.lastName) score += 10; // Profil complet
    if (user.failedLoginAttempts === 0) score += 20; // Pas de tentatives √©chou√©es r√©centes
    if (user.lastLogin && (Date.now() - new Date(user.lastLogin)) < 7 * 24 * 60 * 60 * 1000) {
      score += 20; // Connexion r√©cente
    }
    
    return Math.min(100, score);
  }
}

// Exporter une instance unique du controller
module.exports = new AuthController();