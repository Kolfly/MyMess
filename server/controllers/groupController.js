// üë• CONTROLLER GROUPES - GESTION DES GROUPES (US012)
// Contr√¥leur pour toutes les actions de gestion des groupes

const groupManagementService = require('../services/groupManagementService');

class GroupController {

  // üë§ AJOUTER DES MEMBRES √Ä UN GROUPE
  async addMembers(req, res) {
    try {
      console.log(`üë§ [${req.method}] ${req.originalUrl} - Utilisateur: ${req.user.id}`);

      const { conversationId } = req.params;
      const { memberIds } = req.body;

      if (!memberIds || !Array.isArray(memberIds) || memberIds.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Veuillez fournir une liste de membres √† ajouter',
          code: 'INVALID_MEMBER_IDS',
          timestamp: new Date().toISOString()
        });
      }

      const result = await groupManagementService.addMembersToGroup(
        conversationId, 
        req.user.id, 
        memberIds
      );

      res.status(200).json({
        success: true,
        message: `${result.addedCount} membre(s) ajout√©(s) avec succ√®s`,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Erreur addMembers:', error.message);
      
      const statusCode = error.message.includes('permissions') ? 403 : 400;

      res.status(statusCode).json({
        success: false,
        message: error.message,
        code: 'ADD_MEMBERS_ERROR',
        timestamp: new Date().toISOString()
      });
    }
  }

  // ‚ùå SUPPRIMER UN MEMBRE D'UN GROUPE
  async removeMember(req, res) {
    try {
      console.log(`‚ùå [${req.method}] ${req.originalUrl} - Utilisateur: ${req.user.id}`);

      const { conversationId, memberId } = req.params;

      const result = await groupManagementService.removeMemberFromGroup(
        conversationId, 
        req.user.id, 
        memberId
      );

      res.status(200).json({
        success: true,
        message: 'Membre supprim√© avec succ√®s',
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Erreur removeMember:', error.message);
      
      const statusCode = error.message.includes('permissions') ? 403 : 400;

      res.status(statusCode).json({
        success: false,
        message: error.message,
        code: 'REMOVE_MEMBER_ERROR',
        timestamp: new Date().toISOString()
      });
    }
  }

  // ‚öôÔ∏è MODIFIER LES PARAM√àTRES D'UN GROUPE
  async updateSettings(req, res) {
    try {
      console.log(`‚öôÔ∏è [${req.method}] ${req.originalUrl} - Utilisateur: ${req.user.id}`);

      const { conversationId } = req.params;
      const { name, description } = req.body;

      const result = await groupManagementService.updateGroupSettings(
        conversationId, 
        req.user.id, 
        { name, description }
      );

      res.status(200).json({
        success: true,
        message: 'Param√®tres du groupe mis √† jour avec succ√®s',
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Erreur updateSettings:', error.message);
      
      const statusCode = error.message.includes('permissions') ? 403 : 400;

      res.status(statusCode).json({
        success: false,
        message: error.message,
        code: 'UPDATE_GROUP_ERROR',
        timestamp: new Date().toISOString()
      });
    }
  }

  // üëë MODIFIER LE R√îLE D'UN MEMBRE
  async updateMemberRole(req, res) {
    try {
      console.log(`üëë [${req.method}] ${req.originalUrl} - Utilisateur: ${req.user.id}`);

      const { conversationId, memberId } = req.params;
      const { role } = req.body;

      const result = await groupManagementService.updateMemberRole(
        conversationId, 
        req.user.id, 
        memberId,
        role
      );

      res.status(200).json({
        success: true,
        message: 'R√¥le du membre mis √† jour avec succ√®s',
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Erreur updateMemberRole:', error.message);
      
      const statusCode = error.message.includes('propri√©taire') ? 403 : 400;

      res.status(statusCode).json({
        success: false,
        message: error.message,
        code: 'UPDATE_ROLE_ERROR',
        timestamp: new Date().toISOString()
      });
    }
  }

  // üìã OBTENIR LES D√âTAILS D'UN GROUPE
  async getDetails(req, res) {
    try {
      console.log(`üìã [${req.method}] ${req.originalUrl} - Utilisateur: ${req.user.id}`);

      const { conversationId } = req.params;

      const result = await groupManagementService.getGroupDetails(
        conversationId, 
        req.user.id
      );

      res.status(200).json({
        success: true,
        message: 'D√©tails du groupe r√©cup√©r√©s avec succ√®s',
        data: result.data,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Erreur getDetails:', error.message);
      
      const statusCode = error.message.includes('membre') ? 403 : 400;

      res.status(statusCode).json({
        success: false,
        message: error.message,
        code: 'GET_GROUP_DETAILS_ERROR',
        timestamp: new Date().toISOString()
      });
    }
  }

  // üö™ QUITTER UN GROUPE (US025)
  async leaveGroup(req, res) {
    try {
      console.log(`üö™ [${req.method}] ${req.originalUrl} - Utilisateur: ${req.user.id}`);

      const { conversationId } = req.params;

      const result = await groupManagementService.leaveGroup(conversationId, req.user.id);

      res.status(200).json({
        success: true,
        message: 'Vous avez quitt√© le groupe avec succ√®s',
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Erreur leaveGroup:', error.message);
      
      const statusCode = error.message.includes('non trouv√©') ? 404 :
                        error.message.includes('membre') ? 403 : 500;

      res.status(statusCode).json({
        success: false,
        message: error.message,
        code: 'LEAVE_GROUP_ERROR',
        timestamp: new Date().toISOString()
      });
    }
  }
}

console.log('‚úÖ GroupController cr√©√©');

module.exports = new GroupController();